# https://github.com/mathiasbynens/dotfiles/blob/master/.functions

# Simple calculator
function calc() {
	local result="";
	result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')";
	#                       └─ default (when `--mathlib` is used) is 20
	#
	if [[ "$result" == *.* ]]; then
		# improve the output for decimal numbers
		printf "$result" |
		sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
			-e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
			-e 's/0*$//;s/\.$//';  # remove trailing zeros
	else
		printf "$result";
	fi;
	printf "\n";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Open a project, eg. `hey ~/.supermac`
function hey() {
	cd "$1" && code .;
}

# Open a project relative to the ~/code directory, eg. `hi rileyjshaw`
function hi() {
	hey "$HOME/code/$1";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* *;
	fi;
}

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript;
	else # pipe
		python -mjson.tool | pygmentize -l javascript;
	fi;
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# UTF-8-encode a string of Unicode symbols
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Get a character’s Unicode code point
function codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function s() {
	if [ $# -eq 0 ]; then
		subl .;
	else
		subl "$@";
	fi;
}

# `a` with no arguments opens the current directory in Atom Editor, otherwise
# opens the given location
function a() {
	if [ $# -eq 0 ]; then
		atom .;
	else
		atom "$@";
	fi;
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
	if [ $# -eq 0 ]; then
		vim .;
	else
		vim "$@";
	fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# List remaining TODOs on a project. Thanks @sergeio x1000 for this!
# Usage: todo <name> <optional flag string eg. STOPSHIP>
function todos() {
	todo_usage() { echo "todo: [-l] <name> [<flagstring>]" 1>&2; }

	local OPTIND flag l
	while getopts ":l" flag; do
		case "${flag}" in
			l)
				l=true
				;;
			*)
				echo "Invalid option: -$OPTARG";
				todo_usage
				;;
		esac
	done
	shift $((OPTIND-1))

	# All of a user's TODOs, ordered by date
	_groupby_grep_file_output () {
		# Groups filename:1\nfilename:2 into filename:1,2
		awk -F: '{if ($1 in arr)
						arr[$1] = (arr[$1] "," $2)
					else
						arr[$1] = $2}
					END {
						for (key in arr) printf("%s:%s\n", key, arr[key])
				 }'
	}

	_nums_to_blame_opts () {
		# Turn "1,2,3" into "-L 1,1 -L 2,2 -L 3,3"
		opts=""
		for num in $(sed 's/,/ /g' <<< $1); do
			opts="$opts -L $num,$num"
		done
		echo "$opts"
	}

	_grep_to_blame () {
		while read LINE; do
			filename=$(cut -d: -f1 <<< $LINE)
			line_nums=$(cut -d: -f2 <<< $LINE)
			blame_line_opts=$(_nums_to_blame_opts $line_nums)
			eval "git blame --show-name --show-number $blame_line_opts '$filename'"
		done
	}

	_transform_blame_line () {
		# Replace hash with date, remove committer name
		while read blame_line; do
			hsh=$(cut -d' ' -f1 <<< $blame_line)
			rest=$(cut -d' ' -f2- <<< $blame_line)
			# Remove '(Committer M. Name 2020-01-01 99:99 -7000 123)    '
			rest=$(sed -e 's/ \([0-9]\+\) ([^)]*) */:\1 /' <<< $rest)
			date=$(git show -s --format='%ad' --date=short $hsh)
			echo "$date $rest"
		done
	}

	git grep -n "${2:-TODO}($1)" \
		| if [ "$l" = true ]; then wc -l; else _groupby_grep_file_output \
		| _grep_to_blame \
		| _transform_blame_line \
		| sort; fi
}

function asciify() {
	echo $1 | tr -cd '\000-\177'
}

function asciify-prompt() {
	PS1=$(asciify "$PS1")
	PS2=$(asciify "$PS2")
}

# Print the password of the Wi-Fi network you're currently on.
# Accepts an optional SSID argument to print the password of another network.
function wifi-password() {
	security find-generic-password -D "AirPort network password" -a "${1:-`/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | awk '/ SSID/ {print substr($0, index($0, $2))}'`}" -gw;
}

# Wait for Mozilla staging server to update, then alert; -p to check prod instead
function allizom() {
	local url="https://voice.allizom.org"
	local environment="staging"
	local OPTIND opt
	while getopts ":p" opt; do
		case ${opt} in
			p) url="https://voice.mozilla.org"
			   environment="production";;
		esac
	done
	shift "$((OPTIND - 1))"

	until curl -sI $url | grep "X-Release-Version: $1"; do
		sleep 20
	done
	say "The $environment server has updated."
}

# Attach to the Common Voice DB monitor
function cvdb () {
	local cvhost cvpass cvdbm cvpod
	read cvdbm cvpod <<< $(kubectl get pods -n voice-prod | sort | sed -n 's/\(voice-prod-[[:graph:]]*\).*$/\1/p; s/\(db-monitor-[[:graph:]]*\).*$/\1/p' | head -2)
	read cvhost cvpass <<< $(kubectl -n voice-prod exec -it "$cvpod" -c web -- printenv | sed -n 's/CV_MYSQLHOST=\(.*\)$/\1/p; s/CV_MYSQLPASS=\(.*\)$/\1/p')
	echo -e "DB Monitor:\t$cvdbm\nPod:\t\t$cvpod\nHost:\t\t$cvhost\nPassword:\t$cvpass"
	echo -e "\nAccess with:\tmysql -u admin voice -p -h $cvhost"
	echo -e "…or was it:\tmysql -u admin voice -p -h $cvpass\n"
	kubectl -n voice-prod exec -it "$cvdbm" bash
}
