# Pretty colors
alias ls="ls -GFh"
alias cat='pygmentize -O style=tomorrownighteighties -f console256 -g'

# Prompt colors
# Modified version of @gf3’s Sexy Bash Prompt (https://github.com/gf3/dotfiles)
if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
  export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
  export TERM=xterm-256color
fi

# Modified version of https://github.com/necolas/dotfiles/blob/master/shell/bash_prompt
prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}${branchName}${2}${s}";
	else
		return;
	fi;
}

if tput setaf 1 &> /dev/null; then
	tput sgr0; # reset colors
	bold=$(tput bold);
	reset=$(tput sgr0);
	# Tomorrow Night Eighties, taken from https://gist.github.com/rileyjshaw/978d932a7543ef5f2934
	blue=$(tput setaf 68);
	cyan=$(tput setaf 62);
	green=$(tput setaf 114);
	orange=$(tput setaf 209);
	purple=$(tput setaf 176);
	red=$(tput setaf 210);
	white=$(tput setaf 188);
	yellow=$(tput setaf 221);
  grey=$(tput setaf 59);
  light_grey=$(tput setaf 188);
else
	bold='';
	reset="\e[0m";
	blue="\e[1;34m";
	cyan="\e[1;36m";
	green="\e[1;32m";
	orange="\e[1;33m";
	purple="\e[1;35m";
	red="\e[1;31m";
	white="\e[1;37m";
	yellow="\e[1;33m";
  grey="\e[1;30m";
  light_grey="\e[1;37m";
fi;

# Set the terminal title to the current working directory.
PS1="\[\033]0;\w\007\]";
PS1+="\[${bold}\]";

# Only show username and host when connected via SSH
if [[ "${SSH_TTY}" ]]; then
  # Highlight the user name when logged in as root
  if [[ "${USER}" == "root" ]]; then
    userStyle="${red}";
  else
    userStyle="${orange}";
  fi;
  PS1+="\[${userStyle}\]\u"; # username
  PS1+="\[${white}\] at ";
  PS1+="\[${yellow}\]\h"; # host
  PS1+="\[${white}\] in ";
fi;

PS1+="\[${blue}\]\w"; # working directory
PS1+="\$(prompt_git \"\[$light_grey\] on \[$purple\]\" \"\[${red}\]\")"; # Git repository details
PS1+="\[${reset}\]\[${blue}\] »» \[${reset}\]";
export PS1;

PS2="\[${orange}\]→ \[${reset}\]";
export PS2;

# For reference:
# awesome wizard dude
# export PS1="\e[0;32m\]╷(●‿●)━ ☆ ﾟ.*･｡ﾟ\[\e[0;34m\]\w\n\[\e[0;32m\]  ┘ └  \[\e[0m\] »»» \033]0;\${PWD##*/}\007"

# rainbow divider line
# export PROMPT_COMMAND="update_terminal_cwd;echo \$(s=\$(printf "%*s" \$COLUMNS); echo \${s// /⸰}) | lolcat -p 1.5 -S 36"

# only show the current directory's name in the tab
# export PROMPT_COMMAND='update_terminal_cwd; echo -ne "\033]0;${PWD##*/}\007"'
